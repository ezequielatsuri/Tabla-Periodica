#BlueJ class context
comment0.target=StdIn
comment0.text=\r\n\ \ The\ StdIn\ class\ provides\ static\ methods\ for\ reading\ strings\r\n\ \ and\ numbers\ from\ standard\ input.\r\n\ \ These\ functions\ fall\ into\ one\ of\ four\ categories\:\r\n\ \ \r\n\ \ those\ for\ reading\ individual\ tokens\ from\ standard\ input,\ one\ at\ a\ time,\r\n\ \ \ \ \ \ and\ converting\ each\ to\ a\ number,\ string,\ or\ boolean\r\n\ \ those\ for\ reading\ characters\ from\ standard\ input,\ one\ at\ a\ time\r\n\ \ those\ for\ reading\ lines\ from\ standard\ input,\ one\ at\ a\ time\r\n\ \ those\ for\ reading\ a\ sequence\ of\ values\ of\ the\ same\ type\ from\ standard\ input,\r\n\ \ \ \ \ \ and\ returning\ the\ values\ in\ an\ array\r\n\ \ \r\n\ \ \r\n\ \ Generally,\ it\ is\ best\ not\ to\ mix\ functions\ from\ the\ different\r\n\ \ categories\ in\ the\ same\ program.\r\n\ \ \r\n\ \ Getting\ started.\r\n\ \ To\ use\ this\ class,\ you\ must\ have\ StdIn.class}\ in\ your\r\n\ \ Java\ classpath.\ If\ you\ used\ our\ autoinstaller,\ you\ should\ be\ all\ set.\r\n\ \ Otherwise,\ either\ download\r\n\ \ "https\://introcs.cs.princeton.edu/java/code/stdlib.jar">stdlib.jar\r\n\ \ and\ add\ to\ your\ Java\ classpath\ or\ download\r\n\ \ "https\://introcs.cs.princeton.edu/java/stdlib/StdIn.java">StdIn.java\r\n\ \ and\ put\ a\ copy\ in\ your\ working\ directory.\r\n\ \ \r\n\ \ Reading\ tokens\ from\ standard\ input\ and\ converting\ to\ numbers\ and\ strings.\r\n\ \ You\ can\ use\ the\ following\ methods\ to\ read\ numbers,\ strings,\ and\ booleans\r\n\ \ from\ standard\ input\ one\ at\ a\ time\:\r\n\ \ \r\n\ \ \ \#isEmpty()\r\n\ \ \ \#readInt()\r\n\ \ \ \#readDouble()\r\n\ \ \ \#readString()\r\n\ \ \ \#readShort()\r\n\ \ \ \#readLong()\r\n\ \ \ \#readFloat()\r\n\ \ \ \#readByte()\r\n\ \ \ \#readBoolean()\r\n\ \ \r\n\ \ \r\n\ \ The\ first\ method\ returns\ true\ if\ standard\ input\ has\ more\ tokens.\r\n\ \ Each\ other\ method\ skips\ over\ any\ input\ that\ is\ whitespace.\ Then,\ it\ reads\r\n\ \ the\ next\ token\ and\ attempts\ to\ convert\ it\ into\ a\ value\ of\ the\ specified\r\n\ \ type.\ If\ it\ succeeds,\ it\ returns\ that\ value;\ otherwise,\ it\r\n\ \ throws\ an\ InputMismatchException}.\r\n\ \ \r\n\ \ Whitespace\ includes\ spaces,\ tabs,\ and\ newlines;\ the\ full\ definition\r\n\ \ is\ inherited\ from\ Character\#isWhitespace(char).\r\n\ \ A\ token\ is\ a\ maximal\ sequence\ of\ non-whitespace\ characters.\r\n\ \ The\ precise\ rules\ for\ describing\ which\ tokens\ can\ be\ converted\ to\r\n\ \ integers\ and\ floating-point\ numbers\ are\ inherited\ from\r\n\ \ "http\://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html\#number-syntax">Scanner,\r\n\ \ using\ the\ locale\ Locale\#US;\ the\ rules\r\n\ \ for\ floating-point\ numbers\ are\ slightly\ different\r\n\ \ from\ those\ in\ Double\#valueOf(String),\r\n\ \ but\ unlikely\ to\ be\ of\ concern\ to\ most\ programmers.\r\n\ \ \r\n\ \ As\ an\ example,\ the\ following\ code\ fragment\ reads\ integers\ from\ standard\ input,\r\n\ \ one\ at\ a\ time,\ and\ prints\ them\ one\ per\ line.\r\n\ \ \r\n\ \ while\ (\!StdIn.isEmpty())\ {\r\n\ \ \ \ \ \ double\ value\ \=\ StdIn.readDouble();\r\n\ \ \ \ \ \ System.out.println(value);\r\n\ \ }\r\n\ \ \r\n\ \ \r\n\ \ Reading\ characters\ from\ standard\ input.\r\n\ \ You\ can\ use\ the\ following\ two\ methods\ to\ read\ characters\ from\ standard\ input\ one\ at\ a\ time\:\r\n\ \ \r\n\ \ \ \#hasNextChar()\r\n\ \ \ \#readChar()\r\n\ \ \r\n\ \ \r\n\ \ The\ first\ method\ returns\ true\ if\ standard\ input\ has\ more\ input\ (including\ whitespace).\r\n\ \ The\ second\ method\ reads\ and\ returns\ the\ next\ character\ of\ input\ on\ standard\ \r\n\ \ input\ (possibly\ a\ whitespace\ character).\r\n\ \ \r\n\ \ As\ an\ example,\ the\ following\ code\ fragment\ reads\ characters\ from\ standard\ input,\r\n\ \ one\ character\ at\ a\ time,\ and\ prints\ it\ to\ standard\ output.\r\n\ \ \r\n\ \ while\ (StdIn.hasNextChar())\ {\r\n\ \ \ \ \ \ char\ c\ \=\ StdIn.readChar();\r\n\ \ \ \ \ \ System.out.print(c);\r\n\ \ }\r\n\ \ \r\n\ \ \r\n\ \ Reading\ lines\ from\ standard\ input.\r\n\ \ You\ can\ use\ the\ following\ two\ methods\ to\ read\ lines\ from\ standard\ input\:\r\n\ \ \r\n\ \ \ \#hasNextLine()\r\n\ \ \ \#readLine()\r\n\ \ \r\n\ \ \r\n\ \ The\ first\ method\ returns\ true\ if\ standard\ input\ has\ more\ input\ (including\ whitespace).\r\n\ \ The\ second\ method\ reads\ and\ returns\ the\ remaining\ portion\ of\ \r\n\ \ the\ next\ line\ of\ input\ on\ standard\ input\ (possibly\ whitespace),\r\n\ \ discarding\ the\ trailing\ line\ separator.\r\n\ \ \r\n\ \ A\ line\ separator\ is\ defined\ to\ be\ one\ of\ the\ following\ strings\:\r\n\ \ \\n\ (Linux),\ \\r\ (old\ Macintosh),\r\n\ \ \\r\\n\ (Windows),\r\n\ \ \u2028,\ \u2029,\ or\ \u0085.\r\n\ \ \r\n\ \ As\ an\ example,\ the\ following\ code\ fragment\ reads\ text\ from\ standard\ input,\r\n\ \ one\ line\ at\ a\ time,\ and\ prints\ it\ to\ standard\ output.\r\n\ \ \r\n\ \ while\ (StdIn.hasNextLine())\ {\r\n\ \ \ \ \ \ String\ line\ \=\ StdIn.readLine();\r\n\ \ \ \ \ \ System.out.println(line);\r\n\ \ }\r\n\ \ \r\n\ \ \r\n\ \ Reading\ a\ sequence\ of\ values\ of\ the\ same\ type\ from\ standard\ input.\r\n\ \ You\ can\ use\ the\ following\ methods\ to\ read\ a\ sequence\ numbers,\ strings,\r\n\ \ or\ booleans\ (all\ of\ the\ same\ type)\ from\ standard\ input\:\r\n\ \ \r\n\ \ \ \#readAllDoubles()\r\n\ \ \ \#readAllInts()\r\n\ \ \ \#readAllLongs()\r\n\ \ \ \#readAllStrings()\r\n\ \ \ \#readAllLines()\r\n\ \ \ \#readAll()\r\n\ \ \r\n\ \ \r\n\ \ The\ first\ three\ methods\ read\ of\ all\ of\ remaining\ token\ on\ standard\ input\r\n\ \ and\ converts\ the\ tokens\ to\ values\ of\r\n\ \ the\ specified\ type,\ as\ in\ the\ corresponding\r\n\ \ readdouble,\ readint,\ and\ readString()\ methods.\r\n\ \ The\ readAllLines()\ method\ reads\ all\ remaining\ lines\ on\ standard\r\n\ \ input\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\ \ The\ readAll()\ method\ reads\ all\ remaining\ input\ on\ standard\r\n\ \ input\ and\ returns\ it\ as\ a\ string.\r\n\ \ \r\n\ \ As\ an\ example,\ the\ following\ code\ fragment\ reads\ all\ of\ the\ remaining\r\n\ \ tokens\ from\ standard\ input\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\ \ \r\n\ \ String[]\ words\ \=\ StdIn.readAllStrings();\r\n\ \ \r\n\ \ \r\n\ \ Differences\ with\ Scanner.\r\n\ \ StdIn\ and\ are\ both\ designed\ to\ parse\ \r\n\ \ tokens\ and\ convert\ them\ to\ primitive\ types\ and\ strings.\r\n\ \ The\ main\ differences\ are\ summarized\ below\:\r\n\ \ \r\n\ \ \ StdIn\ is\ a\ set\ of\ static\ methods\ and\ reads\ \r\n\ \ \ \ \ \ \ reads\ input\ from\ only\ standard\ input.\ It\ is\ suitable\ for\ use\ before\r\n\ \ \ \ \ \ \ a\ programmer\ knows\ about\ objects.\r\n\ \ \ \ \ \ \ See\ In\ for\ an\ object-oriented\ version\ that\ handles\r\n\ \ \ \ \ \ \ input\ from\ files,\ URLs,\r\n\ \ \ \ \ \ \ and\ sockets.\r\n\ \ \ StdIn\ uses\ whitespace\ as\ the\ delimiter\ pattern\r\n\ \ \ \ \ \ \ that\ separates\ tokens.\r\n\ \ \ \ \ \ \ \ supports\ arbitrary\ delimiter\ patterns.\r\n\ \ \ StdIn\ coerces\ the\ character-set\ encoding\ to\ UTF-8,\r\n\ \ \ \ \ \ \ which\ is\ the\ most\ widely\ used\ character\ encoding\ for\ Unicode.\r\n\ \ \ StdIn\ coerces\ the\ locale\ to\ Locale\#US,\r\n\ \ \ \ \ \ \ for\ consistency\ with\ System.out},\ Double\#parseDouble(String),\r\n\ \ \ \ \ \ \ and\ floating-point\ literals.\r\n\ \ \ StdIn\ has\ convenient\ methods\ for\ reading\ a\ single\r\n\ \ \ \ \ \ \ character;\ reading\ in\ sequences\ of\ integers,\ doubles,\ or\ strings;\r\n\ \ \ \ \ \ \ and\ reading\ in\ all\ of\ the\ remaining\ input.\r\n\ \ \r\n\ \ \r\n\ \ Historical\ note\:\ StdIn\ preceded\ ;\ when\r\n\ \ \ was\ introduced,\ this\ class\ was\ re-implemented\ to\ use\ .\r\n\ \ \r\n\ \ Using\ standard\ input.\r\n\ \ Standard\ input\ is\ a\ fundamental\ operating\ system\ abstraction\ on\ Mac\ OS\ X,\r\n\ \ Windows,\ and\ Linux.\r\n\ \ The\ methods\ in\ StdIn\ are\ blocking,\ which\ means\ that\ they\r\n\ \ will\ wait\ until\ you\ enter\ input\ on\ standard\ input.\r\n\ \ If\ your\ program\ has\ a\ loop\ that\ repeats\ until\ standard\ input\ is\ empty,\r\n\ \ you\ must\ signal\ that\ the\ input\ is\ finished.\r\n\ \ To\ do\ so,\ depending\ on\ your\ operating\ system\ and\ IDE,\ \r\n\ \ use\ either\ <Ctrl-d>\ or\ <Ctrl-z>,\ on\ its\ own\ line.\r\n\ \ If\ you\ are\ redirecting\ standard\ input\ from\ a\ file,\ you\ will\ not\ need\r\n\ \ to\ do\ anything\ to\ signal\ that\ the\ input\ is\ finished.\r\n\ \ \r\n\ \ Known\ bugs.\r\n\ \ Java's\ UTF-8\ encoding\ does\ not\ recognize\ the\ optional\ \r\n\ \ "http\://bugs.sun.com/bugdatabase/view_bug.do?bug_id\=4508058">byte-order\ mask.\r\n\ \ If\ the\ input\ begins\ with\ the\ optional\ byte-order\ mask,\ StdIn\r\n\ \ will\ have\ an\ extra\ character\ \uFEFF\ at\ the\ beginning.\r\n\ \ \r\n\ \ Reference.\ \r\n\ \ For\ additional\ documentation,\r\n\ \ see\ "https\://introcs.cs.princeton.edu/15inout">Section\ 1.5\ of\ \ \ \r\n\ \ Computer\ Science\:\ An\ Interdisciplinary\ Approach\r\n\ \ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n\ \ @author\ David\ Pritchard\r\n
comment1.params=
comment1.target=StdIn()
comment10.params=
comment10.target=double\ readDouble()
comment10.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ double,\ and\ returns\ the\ double.\r\n\r\n\ @return\ the\ next\ double\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ double\r\n
comment11.params=
comment11.target=float\ readFloat()
comment11.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ float,\ and\ returns\ the\ float.\r\n\r\n\ @return\ the\ next\ float\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ float\r\n
comment12.params=
comment12.target=long\ readLong()
comment12.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ long\ integer,\ and\ returns\ the\ long\ integer.\r\n\r\n\ @return\ the\ next\ long\ integer\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ long\r\n
comment13.params=
comment13.target=short\ readShort()
comment13.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ short\ integer,\ and\ returns\ the\ short\ integer.\r\n\r\n\ @return\ the\ next\ short\ integer\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ short\r\n
comment14.params=
comment14.target=byte\ readByte()
comment14.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ byte,\ and\ returns\ the\ byte.\r\n\r\n\ @return\ the\ next\ byte\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ byte\r\n
comment15.params=
comment15.target=boolean\ readBoolean()
comment15.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ a\ boolean,\r\n\ and\ returns\ the\ boolean.\r\n\r\n\ @return\ the\ next\ boolean\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ a\ boolean\:\r\n\ \ \ \ true\ or\ 1\ for\ true,\ and\ false\ or\ 0\ for\ false,\r\n\ \ \ \ ignoring\ case\r\n
comment16.params=
comment16.target=java.lang.String[]\ readAllStrings()
comment16.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ standard\ input\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\r\n\ @return\ all\ remaining\ tokens\ on\ standard\ input,\ as\ an\ array\ of\ strings\r\n
comment17.params=
comment17.target=java.lang.String[]\ readAllLines()
comment17.text=\r\n\ Reads\ all\ remaining\ lines\ from\ standard\ input\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\ @return\ all\ remaining\ lines\ on\ standard\ input,\ as\ an\ array\ of\ strings\r\n
comment18.params=
comment18.target=int[]\ readAllInts()
comment18.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ standard\ input,\ parses\ them\ as\ integers,\ and\ returns\r\n\ them\ as\ an\ array\ of\ integers.\r\n\ @return\ all\ remaining\ integers\ on\ standard\ input,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ an\ int\r\n
comment19.params=
comment19.target=long[]\ readAllLongs()
comment19.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ standard\ input,\ parses\ them\ as\ longs,\ and\ returns\r\n\ them\ as\ an\ array\ of\ longs.\r\n\ @return\ all\ remaining\ longs\ on\ standard\ input,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ a\ long\r\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\r\n\ Returns\ true\ if\ standard\ input\ is\ empty\ (except\ possibly\ for\ whitespace).\r\n\ Use\ this\ method\ to\ know\ whether\ the\ next\ call\ to\ \#readString(),\ \r\n\ \#readDouble(),\ etc\ will\ succeed.\r\n\r\n\ @return\ true\ if\ standard\ input\ is\ empty\ (except\ possibly\r\n\ \ \ \ \ \ \ \ \ for\ whitespace);\ false\ otherwise\r\n
comment20.params=
comment20.target=double[]\ readAllDoubles()
comment20.text=\r\n\ Reads\ all\ remaining\ tokens\ from\ standard\ input,\ parses\ them\ as\ doubles,\ and\ returns\r\n\ them\ as\ an\ array\ of\ doubles.\r\n\ @return\ all\ remaining\ doubles\ on\ standard\ input,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ a\ double\r\n
comment21.params=
comment21.target=void\ resync()
comment21.text=\r\n\ If\ StdIn\ changes,\ use\ this\ to\ reinitialize\ the\ scanner.\r\n
comment22.params=scanner
comment22.target=void\ setScanner(java.util.Scanner)
comment23.params=
comment23.target=int[]\ readInts()
comment23.text=\r\n\ Reads\ all\ remaining\ tokens,\ parses\ them\ as\ integers,\ and\ returns\r\n\ them\ as\ an\ array\ of\ integers.\r\n\ @return\ all\ remaining\ integers,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ an\ int\r\n\ @deprecated\ Replaced\ by\ \#readAllInts().\r\n
comment24.params=
comment24.target=double[]\ readDoubles()
comment24.text=\r\n\ Reads\ all\ remaining\ tokens,\ parses\ them\ as\ doubles,\ and\ returns\r\n\ them\ as\ an\ array\ of\ doubles.\r\n\ @return\ all\ remaining\ doubles,\ as\ an\ array\r\n\ @throws\ InputMismatchException\ if\ any\ token\ cannot\ be\ parsed\ as\ a\ double\r\n\ @deprecated\ Replaced\ by\ \#readAllDoubles().\r\n
comment25.params=
comment25.target=java.lang.String[]\ readStrings()
comment25.text=\r\n\ Reads\ all\ remaining\ tokens\ and\ returns\ them\ as\ an\ array\ of\ strings.\r\n\ @return\ all\ remaining\ tokens,\ as\ an\ array\ of\ strings\r\n\ @deprecated\ Replaced\ by\ \#readAllStrings().\r\n
comment26.params=args
comment26.target=void\ main(java.lang.String[])
comment26.text=\r\n\ Interactive\ test\ of\ basic\ functionality.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=
comment3.target=boolean\ hasNextLine()
comment3.text=\r\n\ Returns\ true\ if\ standard\ input\ has\ a\ next\ line.\r\n\ Use\ this\ method\ to\ know\ whether\ the\r\n\ next\ call\ to\ \#readLine()\ will\ succeed.\r\n\ This\ method\ is\ functionally\ equivalent\ to\ \#hasNextChar().\r\n\r\n\ @return\ true\ if\ standard\ input\ has\ more\ input\ (including\ whitespace);\r\n\ \ \ \ \ \ \ \ \ false\ otherwise\r\n
comment4.params=
comment4.target=boolean\ hasNextChar()
comment4.text=\r\n\ Returns\ true\ if\ standard\ input\ has\ more\ input\ (including\ whitespace).\r\n\ Use\ this\ method\ to\ know\ whether\ the\ next\ call\ to\ \#readChar()\ will\ succeed.\r\n\ This\ method\ is\ functionally\ equivalent\ to\ \#hasNextLine().\r\n\r\n\ @return\ true\ if\ standard\ input\ has\ more\ input\ (including\ whitespace);\r\n\ \ \ \ \ \ \ \ \ false\ otherwise\r\n
comment5.params=
comment5.target=java.lang.String\ readLine()
comment5.text=\r\n\ Reads\ and\ returns\ the\ next\ line,\ excluding\ the\ line\ separator\ if\ present.\r\n\r\n\ @return\ the\ next\ line,\ excluding\ the\ line\ separator\ if\ present;\r\n\ \ \ \ \ \ \ \ \ null\ if\ no\ such\ line\r\n
comment6.params=
comment6.target=char\ readChar()
comment6.text=\r\n\ Reads\ and\ returns\ the\ next\ character.\r\n\r\n\ @return\ the\ next\ char}\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n
comment7.params=
comment7.target=java.lang.String\ readAll()
comment7.text=\r\n\ Reads\ and\ returns\ the\ remainder\ of\ the\ input,\ as\ a\ string.\r\n\r\n\ @return\ the\ remainder\ of\ the\ input,\ as\ a\ string\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n
comment8.params=
comment8.target=java.lang.String\ readString()
comment8.text=\r\n\ Reads\ the\ next\ token\ \ and\ returns\ the\ String.\r\n\r\n\ @return\ the\ next\ String\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n
comment9.params=
comment9.target=int\ readInt()
comment9.text=\r\n\ Reads\ the\ next\ token\ from\ standard\ input,\ parses\ it\ as\ an\ integer,\ and\ returns\ the\ integer.\r\n\r\n\ @return\ the\ next\ integer\ on\ standard\ input\r\n\ @throws\ NoSuchElementException\ if\ standard\ input\ is\ empty\r\n\ @throws\ InputMismatchException\ if\ the\ next\ token\ cannot\ be\ parsed\ as\ an\ int\r\n
numComments=27
